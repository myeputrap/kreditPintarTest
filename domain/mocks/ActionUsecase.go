// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "goKreditPintar/domain"

	mock "github.com/stretchr/testify/mock"
)

// ActionUsecase is an autogenerated mock type for the ActionUsecase type
type ActionUsecase struct {
	mock.Mock
}

// GetBilling provides a mock function with given fields: ctx, req
func (_m *ActionUsecase) GetBilling(ctx context.Context, req domain.GetAllBillingRequest) (domain.GetAllBillingResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetBilling")
	}

	var r0 domain.GetAllBillingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetAllBillingRequest) (domain.GetAllBillingResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetAllBillingRequest) domain.GetAllBillingResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.GetAllBillingResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetAllBillingRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsumer provides a mock function with given fields: ctx, req
func (_m *ActionUsecase) GetConsumer(ctx context.Context, req domain.GetAllConsumerRequest) (domain.GetAllConsumerResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetConsumer")
	}

	var r0 domain.GetAllConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetAllConsumerRequest) (domain.GetAllConsumerResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetAllConsumerRequest) domain.GetAllConsumerResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.GetAllConsumerResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetAllConsumerRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsumerDetail provides a mock function with given fields: ctx, req
func (_m *ActionUsecase) GetConsumerDetail(ctx context.Context, req int) (domain.Consumer, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetConsumerDetail")
	}

	var r0 domain.Consumer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.Consumer, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.Consumer); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.Consumer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCreditCard provides a mock function with given fields: ctx, req
func (_m *ActionUsecase) GetCreditCard(ctx context.Context, req domain.GetAllCreditCardRequest) (domain.GetAllCreditCardResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCreditCard")
	}

	var r0 domain.GetAllCreditCardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetAllCreditCardRequest) (domain.GetAllCreditCardResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetAllCreditCardRequest) domain.GetAllCreditCardResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.GetAllCreditCardResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetAllCreditCardRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCreditCardDetail provides a mock function with given fields: ctx, req
func (_m *ActionUsecase) GetCreditCardDetail(ctx context.Context, req int) (domain.ConsumerCreditCard, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCreditCardDetail")
	}

	var r0 domain.ConsumerCreditCard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.ConsumerCreditCard, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.ConsumerCreditCard); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.ConsumerCreditCard)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchBilling provides a mock function with given fields: ctx, req, token
func (_m *ActionUsecase) PatchBilling(ctx context.Context, req int, token string) error {
	ret := _m.Called(ctx, req, token)

	if len(ret) == 0 {
		panic("no return value specified for PatchBilling")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, req, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostConsumer provides a mock function with given fields: ctx, req
func (_m *ActionUsecase) PostConsumer(ctx context.Context, req domain.Consumer) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PostConsumer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Consumer) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostConsumerCreditCard provides a mock function with given fields: ctx, req
func (_m *ActionUsecase) PostConsumerCreditCard(ctx context.Context, req domain.ConsumerCreditCard) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PostConsumerCreditCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ConsumerCreditCard) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostTransactionCredit provides a mock function with given fields: ctx, req, token
func (_m *ActionUsecase) PostTransactionCredit(ctx context.Context, req domain.TransactionCreditCard, token string) error {
	ret := _m.Called(ctx, req, token)

	if len(ret) == 0 {
		panic("no return value specified for PostTransactionCredit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TransactionCreditCard, string) error); ok {
		r0 = rf(ctx, req, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewActionUsecase creates a new instance of ActionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActionUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActionUsecase {
	mock := &ActionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
